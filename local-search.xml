<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode Daily Challenge 0816-0818</title>
    <link href="/2024/08/26/LeetCode-DC-0816-0818/"/>
    <url>/2024/08/26/LeetCode-DC-0816-0818/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Daily-Challenge-0816-0818"><a href="#LeetCode-Daily-Challenge-0816-0818" class="headerlink" title="LeetCode Daily Challenge 0816-0818"></a>LeetCode Daily Challenge 0816-0818</h1><blockquote><p>This is a blog integrating LeetCode daily challenges from 08.16 to 08.23. For my own future review, and also open for communication and discussion. </p><p>Github code link: <a href="https://github.com/nanfang-wuyu/LeetCode-Daily-Challenge/tree/main/2024">nanfang-wuyu&#x2F;LeetCode-Daily-Challenge&#x2F;tree&#x2F;main&#x2F;2024</a></p></blockquote><h2 id="No-624-Maximum-Distance-in-Arrays-08-16"><a href="#No-624-Maximum-Distance-in-Arrays-08-16" class="headerlink" title="No.624 Maximum Distance in Arrays (08.16)"></a><a href="https://leetcode.com/problems/maximum-distance-in-arrays/description/">No.624 Maximum Distance in Arrays (08.16)</a></h2><p>Obivously, we can pick up the smallest and biggest number among all arrays, then their absolute difference must be the longest distance. However, the two numbers can’t be in the same array.</p><p>To solve this, I first let each minimum number compare to maximum numbers other than the array which it belongs to, then there wouldn’t be a pair in the same array. Sadly, this solution got a TLE. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDistance</span>(<span class="hljs-params">self, arrays: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        min_list = [arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        max_list = [arr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        distances = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arrays)):<br>            min_num = min_list[i]<br>            max_num = <span class="hljs-built_in">max</span>(max_list[:i] + max_list[i+<span class="hljs-number">1</span>:])<br>            distances.append(<span class="hljs-built_in">abs</span>(min_num - max_num))<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(distances)<br><br><span class="hljs-comment"># TLE  </span><br></code></pre></td></tr></table></figure><p>Then I thought carefully, we can just see if the minimum and maximum are in the same array. If not, the absolute difference is the solution. If so, we can just compare each of them with the second maximum and minimum respectively, as the number of arrays ‘m &gt;&#x3D; 2’. (There will be no exception when two or more minimums in some arrays have same value, it will be one of the two situations above. ) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDistance</span>(<span class="hljs-params">self, arrays: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        min_list = [arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        max_list = [arr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        min_num = <span class="hljs-built_in">min</span>(min_list)<br>        max_num = <span class="hljs-built_in">max</span>(max_list)<br>        min_idx = min_list.index(min_num)<br>        max_idx = max_list.index(max_num)<br>        <span class="hljs-keyword">if</span> min_idx != max_idx:<br>            <span class="hljs-keyword">return</span> max_num - min_num<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(max_list[:max_idx]+max_list[max_idx+<span class="hljs-number">1</span>:]) - min_num,<br>                       max_num - <span class="hljs-built_in">min</span>(min_list[:min_idx]+min_list[min_idx+<span class="hljs-number">1</span>:]))<br><br><span class="hljs-comment"># AC</span><br></code></pre></td></tr></table></figure><h2 id="No-1937-Maximum-Number-of-Points-with-Cost-08-17"><a href="#No-1937-Maximum-Number-of-Points-with-Cost-08-17" class="headerlink" title="No.1937 Maximum Number of Points with Cost (08.17)"></a><a href="https://leetcode.com/problems/ugly-number-ii/description">No.1937 Maximum Number of Points with Cost (08.17)</a></h2><p>The methods take the idea of Dynamic Programming. But the first solution is a brute-force DP, which iterates each pair of points step by step. So the answer got a TLE. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        scores = np.zeros_like(points)<br>        scores[<span class="hljs-number">0</span>] = points[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> <br>            <span class="hljs-keyword">for</span> j, cell <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row):<br>                scores[i][j] = <span class="hljs-built_in">max</span>([cell + scores[i-<span class="hljs-number">1</span>][k] - <span class="hljs-built_in">abs</span>(k-j) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row))])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(scores[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># TLE</span><br></code></pre></td></tr></table></figure><p>Initially, I only find out that the right maximum keeps to be maximum until the cell in current row reaches it. I ignore that the left maximum is the same. So actually, there are only three possible values to be compared for one cell, left maximum, right maximum and the cell above it (in the previous row). lm and rm will -1 from left to right and right to left respectively. When updating left maximum or right maximum, we need to compare it with the cell exactly above, so leftMax and rightMax actually contain the cell above, we can just use max(leftMax, rightMax) for current cell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        scores = np.zeros_like(points)<br>        scores[<span class="hljs-number">0</span>] = points[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>            leftMax, rightMax = np.zeros_like(row), np.zeros_like(row)<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> <br><br>            leftMax[<span class="hljs-number">0</span>] = scores[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(row)):<br>                leftMax[j] = <span class="hljs-built_in">max</span>(leftMax[j-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>, scores[i-<span class="hljs-number">1</span>][j])<br><br>            rightMax[-<span class="hljs-number">1</span>] = scores[i-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                rightMax[j] = <span class="hljs-built_in">max</span>(rightMax[j+<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>, scores[i-<span class="hljs-number">1</span>][j])<br><br>            scores[i] = np.array([<span class="hljs-built_in">max</span>(leftMax[k], rightMax[k]) + row[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row))])<br>            <span class="hljs-comment"># print(leftMax, rightMax, scores[i])</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(scores[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># AC</span><br></code></pre></td></tr></table></figure><h2 id="No-264-Ugly-Number-II-08-18"><a href="#No-264-Ugly-Number-II-08-18" class="headerlink" title="No.264. Ugly Number II (08.18)"></a><a href="https://leetcode.com/problems/ugly-number-ii/description">No.264. Ugly Number II (08.18)</a></h2><p>An “ugly number” is defined as a positive integer whose prime factors are limited to 2, 3, and 5. The challenge is to find the nth ugly number. </p><p>The first solution takes a brute-force approach, which is straightforward but inefficient. A lot of non-ugly numbers are being checked and discarded and each number in the range has to be evaluated multiple times. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nthUglyNumber</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        uglySet = [<span class="hljs-number">1</span>]<br>        primes = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>        num = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(uglySet) &lt; n:<br>            <span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> primes:<br>                <span class="hljs-keyword">if</span> num % prime == <span class="hljs-number">0</span>: <br>                    <span class="hljs-keyword">if</span> num // prime <span class="hljs-keyword">in</span> uglySet:<br>                        uglySet.append(num)<br>                        <span class="hljs-keyword">break</span><br>            num += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(uglySet)<br>        <span class="hljs-keyword">return</span> uglySet[-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># TLE</span><br></code></pre></td></tr></table></figure><p>The second solution improves on the first by leveraging a set to maintain and generate ugly numbers more efficiently. Instead of checking every number, the algorithm uses the smallest ugly number and generates its multiples by 2, 3, and 5, adding them back into the set. By removing the smallest element repeatedly and focusing only on the numbers that are guaranteed to be ugly, this approach dramatically reduces the computation time (close to O(log n)).  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nthUglyNumber</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        uglySet = &#123;<span class="hljs-number">1</span>&#125;<br>        primes = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>        i = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> (i &lt; n):<br>            uglyMini = <span class="hljs-built_in">min</span>(uglySet)<br>            uglySet.remove(uglyMini)<br>            <span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> primes:<br>                uglySet.add(uglyMini * prime)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># print(uglySet)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(uglySet)<br><br><span class="hljs-comment"># AC </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Very Brief Hexo-Github Blog Tutorial (Mac)</title>
    <link href="/2023/12/09/Very-Brief-Hexo-Github-Blog-Tutorial/"/>
    <url>/2023/12/09/Very-Brief-Hexo-Github-Blog-Tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Very-Brief-Hexo-Github-Blog-Tutorial-Mac"><a href="#Very-Brief-Hexo-Github-Blog-Tutorial-Mac" class="headerlink" title="Very Brief Hexo-Github Blog Tutorial (Mac)"></a>Very Brief Hexo-Github Blog Tutorial (Mac)</h1><p>Add <code>sudo</code> if you find permission denied.</p><h2 id="Install-Needed-Libraries"><a href="#Install-Needed-Libraries" class="headerlink" title="Install Needed Libraries"></a>Install Needed Libraries</h2><ol><li><p>Install Node Js:     <code>brew install node</code></p></li><li><p>Install Hexo:     <code>npm install -g hexo-cli</code></p><p>(run <code>sudo npm cache clean --force</code> before installing the hexo if you get a “Your cache folder contains root-owned files…” error)</p></li></ol><p>(Install Git..)</p><h2 id="Start-with-Hexo"><a href="#Start-with-Hexo" class="headerlink" title="Start with Hexo"></a>Start with Hexo</h2><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><ol><li><p><code>cd &lt;Your Blog Folder Path&gt;</code>, like <code>cd Blog</code></p></li><li><p><code>hexo init</code></p></li><li><p>Default post folder: <code>Blog/source/_posts</code></p></li></ol><h3 id="First-Blog"><a href="#First-Blog" class="headerlink" title="First Blog"></a>First Blog</h3><ol><li><p><code>hexo n &lt;Your First Blog Name&gt;</code></p></li><li><p>Modify your blog using markdown editor or command lines.</p></li><li><p>run: <code>hexo clean</code>, <code>hexo g</code>, <code>hexo s</code></p></li><li><p>See it in <a href="http://localhost:4000/">http://localhost:4000/</a> and press Ctrl + c to stop.</p></li></ol><h2 id="Deploy-to-Github"><a href="#Deploy-to-Github" class="headerlink" title="Deploy to Github"></a>Deploy to Github</h2><h3 id="Configure-SSH-Keys"><a href="#Configure-SSH-Keys" class="headerlink" title="Configure SSH Keys"></a>Configure SSH Keys</h3><p>You can skip this step, if you want to login with password each time you . This method would be much safer.</p><ol><li><p>Create: <code>ssh-keygen -t rsa -b 2048</code></p></li><li><p>Default key pair loacation is: <code>~/.ssh/id_rsa</code></p></li><li><p>Public key: <code>id_rsa.pub</code>, which starts with <code>ssh-rsa</code></p></li><li><p>Copy the public key to Github user settings –&gt; SSH and GPG keys –&gt; New SSH key</p></li><li><p>Test with <code>ssh -T git@github.com</code>. You should see “You’ve successfully authenticated…” after entering ‘yes’.</p></li></ol><h3 id="Set-the-Domain-Name"><a href="#Set-the-Domain-Name" class="headerlink" title="Set the Domain Name"></a>Set the Domain Name</h3><ol><li><p>Create new Github repository with username: <code>&lt;your github account name&gt;.github.io</code></p></li><li><p>Install hexo-git deployer tool: <code>npm install hexo-deployer-git --save</code></p></li><li><p>modify _config.yml and save the file.</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:username/username.github.io.git<br><span class="hljs-symbol">branch:</span> master<br><br># <span class="hljs-keyword">Set</span> the branch <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;main&#x27; or &#x27;master&#x27; depends on your choice</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>Let’s change a better theme.</p><ol><li><p>Go to your blog folder: <code>cd Blog</code></p></li><li><p>Take theme ‘iLIKE’ as an example: <code>git clone https://github.com/CaiChenghan/iLiKE.git themes/iLiKE</code></p></li><li><p>Open <code>_config.yml</code>, edit theme: <code>theme: iLIKE</code></p></li><li><p>run <code>hexo clean</code>, <code>hexo g</code>, <code>hexo s</code> and see new theme in <a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ol><h3 id="Recommendation"><a href="#Recommendation" class="headerlink" title="Recommendation"></a>Recommendation</h3><ol><li><p>Hexo official theme website: <a href="https://hexo.io/themes/">Themes | Hexo</a></p></li><li><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>, <a href="https://github.com/iissnan/hexo-theme-next">Next</a>, <a href="https://github.com/kywk/hexo-theme_casper">Casper</a>, <a href="https://github.com/Haojen/hexo-theme-Claudia">Claudia</a>, <a href="https://github.com/V-Vincen/hexo-theme-livemylife">livemylife</a>, <a href="https://hexo-theme-async.imalun.com/guide/">Async</a>, …</p></li><li><p>Some of the themes may be recommended to install from <code>npm</code>, instead of cloning the repository.</p></li></ol><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><ol><li><p><code>hexo n &quot;new article&quot;</code></p></li><li><p><code>(hexo clean)</code>, <code>hexo g</code>, <code>(hexo s)</code></p></li><li><p><code>hexo d</code></p></li></ol><h2 id="Before-Completion"><a href="#Before-Completion" class="headerlink" title="Before Completion"></a>Before Completion</h2><p>hexo n &#x3D;&#x3D; hexo new<br>hexo g &#x3D;&#x3D; hexo generate<br>hexo s &#x3D;&#x3D; hexo server<br>hexo d &#x3D;&#x3D; hexo deploy</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><p>A Chinese version tutorial with more specific explanation: <a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa#xiu-gai-zhu-ti">使用hexo+github搭建免费个人博客详细教程-好记的博客</a></p></li><li><p>Another Chinese version tutorial: <a href="https://zhuanlan.zhihu.com/p/114195340">https://zhuanlan.zhihu.com/p/114195340</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
