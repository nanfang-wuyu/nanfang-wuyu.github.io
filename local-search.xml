<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode Daily Challenge 0816-0818</title>
    <link href="/2024/08/26/LeetCode-DC-0816-0818/"/>
    <url>/2024/08/26/LeetCode-DC-0816-0818/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Daily-Challenge-0816-0818"><a href="#LeetCode-Daily-Challenge-0816-0818" class="headerlink" title="LeetCode Daily Challenge 0816-0818"></a>LeetCode Daily Challenge 0816-0818</h1><blockquote><p>This is a blog integrating LeetCode daily challenges from 08.16 to 08.23. For my own future review, and also open for communication and discussion. </p><p>Github code link: <a href="https://github.com/nanfang-wuyu/LeetCode-Daily-Challenge/tree/main/2024">nanfang-wuyu&#x2F;LeetCode-Daily-Challenge&#x2F;tree&#x2F;main&#x2F;2024</a></p></blockquote><h2 id="No-624-Maximum-Distance-in-Arrays-08-16"><a href="#No-624-Maximum-Distance-in-Arrays-08-16" class="headerlink" title="No.624 Maximum Distance in Arrays (08.16)"></a><a href="https://leetcode.com/problems/maximum-distance-in-arrays/description/">No.624 Maximum Distance in Arrays (08.16)</a></h2><p>Obivously, we can pick up the smallest and biggest number among all arrays, then their absolute difference must be the longest distance. However, the two numbers can’t be in the same array.</p><p>To solve this, I first let each minimum number compare to maximum numbers other than the array which it belongs to, then there wouldn’t be a pair in the same array. Sadly, this solution got a TLE. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDistance</span>(<span class="hljs-params">self, arrays: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        min_list = [arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        max_list = [arr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        distances = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arrays)):<br>            min_num = min_list[i]<br>            max_num = <span class="hljs-built_in">max</span>(max_list[:i] + max_list[i+<span class="hljs-number">1</span>:])<br>            distances.append(<span class="hljs-built_in">abs</span>(min_num - max_num))<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(distances)<br><br><span class="hljs-comment"># TLE  </span><br></code></pre></td></tr></table></figure><p>Then I thought carefully, we can just see if the minimum and maximum are in the same array. If not, the absolute difference is the solution. If so, we can just compare each of them with the second maximum and minimum respectively, as the number of arrays ‘m &gt;&#x3D; 2’. (There will be no exception when two or more minimums in some arrays have same value, it will be one of the two situations above. ) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDistance</span>(<span class="hljs-params">self, arrays: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        min_list = [arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        max_list = [arr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> arrays]<br>        min_num = <span class="hljs-built_in">min</span>(min_list)<br>        max_num = <span class="hljs-built_in">max</span>(max_list)<br>        min_idx = min_list.index(min_num)<br>        max_idx = max_list.index(max_num)<br>        <span class="hljs-keyword">if</span> min_idx != max_idx:<br>            <span class="hljs-keyword">return</span> max_num - min_num<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(max_list[:max_idx]+max_list[max_idx+<span class="hljs-number">1</span>:]) - min_num,<br>                       max_num - <span class="hljs-built_in">min</span>(min_list[:min_idx]+min_list[min_idx+<span class="hljs-number">1</span>:]))<br><br><span class="hljs-comment"># AC</span><br></code></pre></td></tr></table></figure><h2 id="No-1937-Maximum-Number-of-Points-with-Cost-08-17"><a href="#No-1937-Maximum-Number-of-Points-with-Cost-08-17" class="headerlink" title="No.1937 Maximum Number of Points with Cost (08.17)"></a><a href="https://leetcode.com/problems/ugly-number-ii/description">No.1937 Maximum Number of Points with Cost (08.17)</a></h2><p>The methods take the idea of Dynamic Programming. But the first solution is a brute-force DP, which iterates each pair of points step by step. So the answer got a TLE. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        scores = np.zeros_like(points)<br>        scores[<span class="hljs-number">0</span>] = points[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> <br>            <span class="hljs-keyword">for</span> j, cell <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row):<br>                scores[i][j] = <span class="hljs-built_in">max</span>([cell + scores[i-<span class="hljs-number">1</span>][k] - <span class="hljs-built_in">abs</span>(k-j) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row))])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(scores[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># TLE</span><br></code></pre></td></tr></table></figure><p>Initially, I only find out that the right maximum keeps to be maximum until the cell in current row reaches it. I ignore that the left maximum is the same. So actually, there are only three possible values to be compared for one cell, left maximum, right maximum and the cell above it (in the previous row). lm and rm will -1 from left to right and right to left respectively. When updating left maximum or right maximum, we need to compare it with the cell exactly above, so leftMax and rightMax actually contain the cell above, we can just use max(leftMax, rightMax) for current cell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        scores = np.zeros_like(points)<br>        scores[<span class="hljs-number">0</span>] = points[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>            leftMax, rightMax = np.zeros_like(row), np.zeros_like(row)<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> <br><br>            leftMax[<span class="hljs-number">0</span>] = scores[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(row)):<br>                leftMax[j] = <span class="hljs-built_in">max</span>(leftMax[j-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>, scores[i-<span class="hljs-number">1</span>][j])<br><br>            rightMax[-<span class="hljs-number">1</span>] = scores[i-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                rightMax[j] = <span class="hljs-built_in">max</span>(rightMax[j+<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>, scores[i-<span class="hljs-number">1</span>][j])<br><br>            scores[i] = np.array([<span class="hljs-built_in">max</span>(leftMax[k], rightMax[k]) + row[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row))])<br>            <span class="hljs-comment"># print(leftMax, rightMax, scores[i])</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(scores[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># AC</span><br></code></pre></td></tr></table></figure><h2 id="No-264-Ugly-Number-II-08-18"><a href="#No-264-Ugly-Number-II-08-18" class="headerlink" title="No.264. Ugly Number II (08.18)"></a><a href="https://leetcode.com/problems/ugly-number-ii/description">No.264. Ugly Number II (08.18)</a></h2><p>An “ugly number” is defined as a positive integer whose prime factors are limited to 2, 3, and 5. The challenge is to find the nth ugly number. </p><p>The first solution takes a brute-force approach, which is straightforward but inefficient. A lot of non-ugly numbers are being checked and discarded and each number in the range has to be evaluated multiple times. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nthUglyNumber</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        uglySet = [<span class="hljs-number">1</span>]<br>        primes = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>        num = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(uglySet) &lt; n:<br>            <span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> primes:<br>                <span class="hljs-keyword">if</span> num % prime == <span class="hljs-number">0</span>: <br>                    <span class="hljs-keyword">if</span> num // prime <span class="hljs-keyword">in</span> uglySet:<br>                        uglySet.append(num)<br>                        <span class="hljs-keyword">break</span><br>            num += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(uglySet)<br>        <span class="hljs-keyword">return</span> uglySet[-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># TLE</span><br></code></pre></td></tr></table></figure><p>The second solution improves on the first by leveraging a set to maintain and generate ugly numbers more efficiently. Instead of checking every number, the algorithm uses the smallest ugly number and generates its multiples by 2, 3, and 5, adding them back into the set. By removing the smallest element repeatedly and focusing only on the numbers that are guaranteed to be ugly, this approach dramatically reduces the computation time (close to O(log n)).  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">nthUglyNumber</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        uglySet = &#123;<span class="hljs-number">1</span>&#125;<br>        primes = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>        i = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> (i &lt; n):<br>            uglyMini = <span class="hljs-built_in">min</span>(uglySet)<br>            uglySet.remove(uglyMini)<br>            <span class="hljs-keyword">for</span> prime <span class="hljs-keyword">in</span> primes:<br>                uglySet.add(uglyMini * prime)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># print(uglySet)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(uglySet)<br><br><span class="hljs-comment"># AC </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure and Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conclude the Contracts Development Worklog</title>
    <link href="/2024/07/14/Conclude-the-Contracts-Development-Worklog/"/>
    <url>/2024/07/14/Conclude-the-Contracts-Development-Worklog/</url>
    
    <content type="html"><![CDATA[<p>Project Setup:</p><ul><li>~~Create a new Unity 2D project~~~</li><li><del>Set up your version control (e.g., Git)</del></li></ul><p>Create Basic UI:</p><ul><li><del>Main menu</del></li><li>Combat screen</li><li>Map screen</li><li>Deck view</li></ul><p>Design Core Systems:</p><ul><li>Card system (data structure for cards)</li><li>Deck system (managing player’s deck)</li><li>Combat system (turn-based logic)</li><li>Enemy AI</li><li>Map&#x2F;Encounter generation</li></ul><p>Implement Card System:</p><p>Implement Deck System</p><p>Implement Combat System:</p><p>Implement Enemy AI:</p><ul><li>Create different enemy types</li><li>Implement basic decision-making for enemy actions</li></ul><p>Create Map&#x2F;Encounter System:</p><ul><li>Implement a system to generate random maps</li><li>Create different types of encounters (combat, events, shops)</li></ul><p>Add Assets:</p><ul><li>Create or acquire card art</li><li>Design UI elements</li><li>Add sound effects and music</li></ul><p>Implement Save&#x2F;Load System:</p><ul><li>Allow players to save their progress</li><li>Implement game state serialization</li></ul><p>Polish and Balance:</p><ul><li>Playtest extensively</li><li>Balance card effects, enemy difficulty, etc.</li><li>Add visual effects and animations</li></ul><p>Add Your Unique Features:</p><ul><li>Implement the unique mechanics that will set your game apart</li></ul><h2 id="Create-basic-UI"><a href="#Create-basic-UI" class="headerlink" title="Create basic UI"></a>Create basic UI</h2><h3 id="Main-Menu"><a href="#Main-Menu" class="headerlink" title="Main Menu"></a>Main Menu</h3><ul><li><del>Set up the Canvas:</del><ul><li><del>In the Hierarchy, right-click and select UI &gt; Canvas</del></li><li><del>This will create a Canvas with an Event System</del></li></ul></li><li><del>Create a background:</del><ul><li><del>Right-click on the Canvas in the Hierarchy</del></li><li><del>Select UI &gt; Image</del></li><li><del>In the Inspector, you can set the color or assign a sprite to this image</del></li></ul></li><li><del>Add a title:</del><ul><li><del>Right-click on the Canvas</del></li><li><del>Select UI &gt; Text - TextMeshPro</del></li><li><del>If prompted to import TextMeshPro essentials, click ‘Import’</del></li><li><del>Set the text, font, size, and color in the Inspector</del></li></ul></li><li><del>Create buttons:</del><ul><li><del>Right-click on the Canvas</del></li><li><del>Select UI &gt; Button - TextMeshPro</del></li><li><del>Repeat this for each button you want (e.g., “Start Game”, “Options”, “Quit”)</del></li></ul></li><li><del>Arrange the elements:</del><ul><li><del>Use the Rect Transform component to position and size your UI elements</del></li><li><del>You can use anchors to make your UI responsive to different screen sizes</del></li></ul></li><li><del>Create a script for menu functionality:</del><ul><li><del>Create a new C# script named “MainMenu”</del></li><li><del>Attach this script to an empty GameObject in your scene</del></li></ul></li><li><del>Connect buttons to script:</del><ul><li><del>Select each button in the Hierarchy</del></li><li><del>In the Inspector, find the OnClick() section</del></li><li><del>Click the ‘+’ to add a new event</del></li><li><del>Drag the GameObject with your MainMenu script to the object field</del></li><li><del>Select the corresponding function from the dropdown (e.g., MainMenu.StartGame)</del></li></ul></li><li><del>Test your menu:</del><ul><li><del>Press Play in the Unity Editor</del></li><li><del>Click the buttons to ensure they work as expected</del></li></ul></li><li>TODO further: Options setting scene</li><li>TODO further: Add change for hover and click buttons</li></ul><h3 id="Combat-Screen"><a href="#Combat-Screen" class="headerlink" title="Combat Screen"></a>Combat Screen</h3><ul><li>Set up the Scene:<ul><li><del>Create a new scene for combat</del></li><li><del>Add a Canvas for UI elements</del></li></ul></li><li>Create UI Elements:<ul><li>Player area (health, energy, deck, discard pile)</li><li>Enemy area (health, intent)</li><li>Hand area (to display player’s cards)</li><li>End Turn button</li></ul></li><li><del>Create necessary scripts:</del><ul><li><del>CombatManager</del></li><li><del>Player</del></li><li><del>Enemy</del></li><li><del>Card</del></li></ul></li><li><del>Basic CombatManager script:</del></li><li><del>Basic Player script:</del></li><li><del>Basic Enemy script:</del></li><li><del>Basic Card script:</del></li><li><del>CardDisplay script (attach to card prefab)</del></li></ul><h4 id="Player-Area"><a href="#Player-Area" class="headerlink" title="Player Area"></a>Player Area</h4><p>Player Area Panel (Horizontal Layout Group)<br>├── Status Panel (Vertical Layout Group)<br>│   ├── Health Bar<br>│   │   └── Health Text<br>│   └── Energy<br>│       ├── Energy Icon<br>│       └── Energy Text<br>├── Stats Panel (Vertical Layout Group)<br>│   ├── Attack Power<br>│   │   ├── Icon<br>│   │   └── Value Text<br>│   ├── Defence Power<br>│   │   ├── Icon<br>│   │   └── Value Text<br>│   └── … (other stats)<br>└── Piles Panel (Vertical Layout Group)<br>    ├── Draw Pile<br>    │   ├── Pile Icon<br>    │   └── Count Text<br>    └── Discard Pile<br>        ├── Pile Icon<br>        └── Count Text</p><p>TODO: horizontal behavior, <del>image path fix</del></p><h5 id="json-CSV"><a href="#json-CSV" class="headerlink" title="json CSV"></a><del>json</del> CSV</h5><p><del>language configuration why don’t we use json to store all info? Great!</del></p><p><del>json structure? Different type</del></p><p>use spreadsheet instead</p><p>put language as a future work</p><p>Use filter to find group. </p><h5 id="Difference-and-connection-between-inspector-and-code"><a href="#Difference-and-connection-between-inspector-and-code" class="headerlink" title="Difference and connection between inspector and code"></a>Difference and connection between inspector and code</h5><p>Note: “Permanent changes must be made in Edit mode” </p><p>“If you change the default value in the script after it has already been modified in the Inspector, the value set in the Inspector will still take precedence. The new script default value will not override the existing serialized value in the Inspector. To apply the new script default value, you would need to reset the component in the Inspector or manually update the value there.”</p><p><del>new card structure and logic</del></p><p><del>set the random seed</del></p><p>“Yes, exactly! When you modify the <code>Transform</code> properties (like position, rotation, or scale) of a <code>Card</code> component, it affects the GameObject that the <code>Card</code> is attached to. Since the <code>Transform</code> is a component of the GameObject, any changes you make to the <code>Transform</code> directly alter how that GameObject is positioned or oriented in the scene.”</p><p><img src="/Users/nanfangwuyu/Library/Application%20Support/marktext/images/2024-07-17-19-59-15-image.png"></p><p>Integrate UI </p><p>Debug star:</p><p>Ch3 check 大小写</p><p>Ch4 </p><p>Object reference not set 很有可能没有把script 加上去</p><p>unity audio asset formats: mp3, wav, flac … not <del>m4a</del></p><p>无法听到声音 重启Unity之后解决了 难绷 卡这么久 气死我了 不稳定 后面又听不到了</p><p>Ch5 Ch6 Ch7</p><p>这两天体验过了解决过了 skip</p><p>Ch8 Ch10</p><p><del>Handarea 显示</del> 解决 count为0 把init提前到awake</p><p>抽牌堆20 应为12 </p><p>是不是应该直接全部create？然后只是抽牌</p><p><img src="/Users/nanfangwuyu/Library/Application%20Support/marktext/images/2024-07-18-03-05-06-image.png"></p><p>帅！</p><p>重新拖拽handTransform之后bug解决，可能是之前换了层级需要重新引用</p><p>Ch13 Ch14 Ch15</p><p>No, the card will not show in the UI if it is initialized without a parent transform.x    &#96;</p><p>将parent 设置为FightUI 然后false</p><p>设置动画时候不能点击卡牌</p><p>Ch12 </p><p>The <code>ShowTip</code> method is likely designed to take an action (delegate) as a parameter and execute it once the tip is displayed or after some other condition is met.</p><p><img src="/Users/nanfangwuyu/Desktop/%E6%88%AA%E5%B1%8F2024-07-19%2021.22.42.png" alt="截屏2024-07-19 21.22.42.png"></p><p>Ch16 Ch17</p><p>Setting <code>canvasGroup.blocksRaycasts = false</code> while dragging a card allows other elements underneath the card to receive pointer events. Here’s why this can be useful:</p><ul><li><p><strong>Dropping the Card</strong>:</p><ul><li>When a card is being dragged, you might have specific drop zones or other UI elements that need to respond to the drag. For example, a hand area, discard pile, or play area could be valid targets for dropping the card. By allowing these elements to receive pointer events, you can detect where the card is being dragged to and handle the drop action appropriately.</li></ul></li><li><p><strong>Dynamic Interaction</strong>:</p><ul><li>Enabling interactions with underlying elements allows for more dynamic and interactive UI behavior. For instance, as the card is dragged over different potential drop targets, you might want to highlight or provide feedback on those targets to indicate they are valid drop zones.</li></ul></li><li><p>…</p></li></ul><p>bug合集：</p><p>右键会让位置失效 –》 禁止右键</p><p>各种卡牌bug</p><p>UI method 2 需要更改：</p><ol><li><p><del>使用和取消出现消失逻辑有误</del></p></li><li><p><del>选中卡牌效果变更，永远在最前面</del></p></li><li><p><del>划过卡牌之后其位置变回原位</del></p></li><li><p>连续点击会让卡牌上下移动</p></li><li><p>偶尔还是会有排序不同的情况发生</p></li></ol><p>(敌人模块) Ch9 Ch11</p><p>素材</p><p>(全焦:1.5), (全身:1.5), (双脚并拢站立:1.2), (具有淡绿色皮肤和绿色头发的幻想木精灵:1.3), 电影灯光, 火花, 光线追踪, 框架, 人物图表, 參考表, 超高清, 杰作, 纹理皮肤, 超级细节, 高细节, 纹理皮肤, 高细节, 高质量, 屡获殊荣, 最好的质量, 高分辨率</p><p>最好的质量、杰作、1 名女孩、黑色背景、蓝头发:1.5、蓝眼睛、红唇, 白色衣服、黑色与白色世界、黑色与白色世界、皮肤苍白、邪魅的微笑，(全身:1.5)，站立，微微侧身，露出双脚，从头到脚趾，最好的质量, 高分辨率</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Computer_tools</title>
    <link href="/2024/01/03/Computer-tools/"/>
    <url>/2024/01/03/Computer-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="Computer-Tools"><a href="#Computer-Tools" class="headerlink" title="Computer Tools"></a>Computer Tools</h1><h2 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h2><ol><li>immersive translate</li></ol><h2 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h2><ol><li><a href="https://brilliant.org/s/data-analysis/">Brilliant</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AI_tools</title>
    <link href="/2024/01/03/AI-tools/"/>
    <url>/2024/01/03/AI-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="AI-Tools"><a href="#AI-Tools" class="headerlink" title="AI Tools"></a>AI Tools</h1><p>Updated to: 2024-01</p><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><ol><li><p><a href="https://civitai.com/images?tags=5133">Civitai Gallery | AI-Generated Art Showcase</a></p></li><li><p>DragGAN</p></li><li><p>MidJourney</p></li><li><p>Stable Diffusion</p></li></ol><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><ol><li><p>AIVA</p></li><li><p>jsfxr</p></li></ol><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><ol><li>ChatGPT</li></ol><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ol><li>解说 gptv-app</li></ol><h2 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h2><ol><li><p>screenshot-to-code</p></li><li><p><a href="https://www.dora.run/ai">Dora AI</a></p></li></ol><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><ol><li><p>logodiffusion.com</p></li><li><p>pacdora</p></li></ol><h2 id="Model-Multimedia-Other"><a href="#Model-Multimedia-Other" class="headerlink" title="Model &#x2F; Multimedia &#x2F; Other"></a>Model &#x2F; Multimedia &#x2F; Other</h2><ol><li><p>百度飞桨</p></li><li><p>虚拟人 <a href="www.d-id.com">D-id</a></p></li><li><p>OpenAssitant</p></li><li><p><a href="https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard">LMSys Chatbot Arena Leaderboard - a Hugging Face Space by lmsys</a></p></li></ol><h2 id="Paper-writing-reading"><a href="#Paper-writing-reading" class="headerlink" title="Paper writing &#x2F; reading"></a>Paper writing &#x2F; reading</h2><ol><li><p>通义智文 <a href="https://tongyi.aliyun.com/zhiwen#/home">https://tongyi.aliyun.com/zhiwen#/home</a> </p></li><li><p>newbing</p></li><li><p>app.humata.ai (30-day free trial)</p></li><li><p>readpaper.com</p></li><li><p>monica chatpdf</p></li></ol><h2 id="Bilibili-up"><a href="#Bilibili-up" class="headerlink" title="Bilibili up"></a>Bilibili up</h2><ol><li><p><a href="https://space.bilibili.com/1814756990">Nenly同学的个人空间-Nenly同学个人主页-哔哩哔哩视频</a></p></li><li><p><a href="https://space.bilibili.com/1845434732">产品君的个人空间-产品君个人主页-哔哩哔哩视频</a></p></li><li><p><a href="https://space.bilibili.com/492456340">公子龙龙龙的个人空间-公子龙龙龙个人主页-哔哩哔哩视频</a></p></li><li><p><a href="https://space.bilibili.com/486989780">老麦的工具库的个人空间-老麦的工具库个人主页-哔哩哔哩视频</a></p></li></ol><img src="file:///Users/nanfangwuyu/Library/Application%20Support/marktext/images/2024-01-07-16-52-46-image.png" title="" alt="" width="318"><p>DeepSpeed</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Very Brief Hexo-Github Blog Tutorial (Mac)</title>
    <link href="/2023/12/09/Very-Brief-Hexo-Github-Blog-Tutorial/"/>
    <url>/2023/12/09/Very-Brief-Hexo-Github-Blog-Tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Very-Brief-Hexo-Github-Blog-Tutorial-Mac"><a href="#Very-Brief-Hexo-Github-Blog-Tutorial-Mac" class="headerlink" title="Very Brief Hexo-Github Blog Tutorial (Mac)"></a>Very Brief Hexo-Github Blog Tutorial (Mac)</h1><p>Add <code>sudo</code> if you find permission denied.</p><h2 id="Install-Needed-Libraries"><a href="#Install-Needed-Libraries" class="headerlink" title="Install Needed Libraries"></a>Install Needed Libraries</h2><ol><li><p>Install Node Js:     <code>brew install node</code></p></li><li><p>Install Hexo:     <code>npm install -g hexo-cli</code></p><p>(run <code>sudo npm cache clean --force</code> before installing the hexo if you get a “Your cache folder contains root-owned files…” error)</p></li></ol><p>(Install Git..)</p><h2 id="Start-with-Hexo"><a href="#Start-with-Hexo" class="headerlink" title="Start with Hexo"></a>Start with Hexo</h2><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><ol><li><p><code>cd &lt;Your Blog Folder Path&gt;</code>, like <code>cd Blog</code></p></li><li><p><code>hexo init</code></p></li><li><p>Default post folder: <code>Blog/source/_posts</code></p></li></ol><h3 id="First-Blog"><a href="#First-Blog" class="headerlink" title="First Blog"></a>First Blog</h3><ol><li><p><code>hexo n &lt;Your First Blog Name&gt;</code></p></li><li><p>Modify your blog using markdown editor or command lines.</p></li><li><p>run: <code>hexo clean</code>, <code>hexo g</code>, <code>hexo s</code></p></li><li><p>See it in <a href="http://localhost:4000/">http://localhost:4000/</a> and press Ctrl + c to stop.</p></li></ol><h2 id="Deploy-to-Github"><a href="#Deploy-to-Github" class="headerlink" title="Deploy to Github"></a>Deploy to Github</h2><h3 id="Configure-SSH-Keys"><a href="#Configure-SSH-Keys" class="headerlink" title="Configure SSH Keys"></a>Configure SSH Keys</h3><p>You can skip this step, if you want to login with password each time you . This method would be much safer.</p><ol><li><p>Create: <code>ssh-keygen -t rsa -b 2048</code></p></li><li><p>Default key pair loacation is: <code>~/.ssh/id_rsa</code></p></li><li><p>Public key: <code>id_rsa.pub</code>, which starts with <code>ssh-rsa</code></p></li><li><p>Copy the public key to Github user settings –&gt; SSH and GPG keys –&gt; New SSH key</p></li><li><p>Test with <code>ssh -T git@github.com</code>. You should see “You’ve successfully authenticated…” after entering ‘yes’.</p></li></ol><h3 id="Set-the-Domain-Name"><a href="#Set-the-Domain-Name" class="headerlink" title="Set the Domain Name"></a>Set the Domain Name</h3><ol><li><p>Create new Github repository with username: <code>&lt;your github account name&gt;.github.io</code></p></li><li><p>Install hexo-git deployer tool: <code>npm install hexo-deployer-git --save</code></p></li><li><p>modify _config.yml and save the file.</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> git@github.com:username/username.github.io.git<br><span class="hljs-symbol">branch:</span> master<br><br># <span class="hljs-keyword">Set</span> the branch <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;main&#x27; or &#x27;master&#x27; depends on your choice</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>Let’s change a better theme.</p><ol><li><p>Go to your blog folder: <code>cd Blog</code></p></li><li><p>Take theme ‘iLIKE’ as an example: <code>git clone https://github.com/CaiChenghan/iLiKE.git themes/iLiKE</code></p></li><li><p>Open <code>_config.yml</code>, edit theme: <code>theme: iLIKE</code></p></li><li><p>run <code>hexo clean</code>, <code>hexo g</code>, <code>hexo s</code> and see new theme in <a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ol><h3 id="Recommendation"><a href="#Recommendation" class="headerlink" title="Recommendation"></a>Recommendation</h3><ol><li><p>Hexo official theme website: <a href="https://hexo.io/themes/">Themes | Hexo</a></p></li><li><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>, <a href="https://github.com/iissnan/hexo-theme-next">Next</a>, <a href="https://github.com/kywk/hexo-theme_casper">Casper</a>, <a href="https://github.com/Haojen/hexo-theme-Claudia">Claudia</a>, <a href="https://github.com/V-Vincen/hexo-theme-livemylife">livemylife</a>, <a href="https://hexo-theme-async.imalun.com/guide/">Async</a>, …</p></li><li><p>Some of the themes may be recommended to install from <code>npm</code>, instead of cloning the repository.</p></li></ol><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><ol><li><p><code>hexo n &quot;new article&quot;</code></p></li><li><p><code>(hexo clean)</code>, <code>hexo g</code>, <code>(hexo s)</code></p></li><li><p><code>hexo d</code></p></li></ol><h2 id="Before-Completion"><a href="#Before-Completion" class="headerlink" title="Before Completion"></a>Before Completion</h2><p>hexo n &#x3D;&#x3D; hexo new<br>hexo g &#x3D;&#x3D; hexo generate<br>hexo s &#x3D;&#x3D; hexo server<br>hexo d &#x3D;&#x3D; hexo deploy</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><p>A Chinese version tutorial with more specific explanation: <a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa#xiu-gai-zhu-ti">使用hexo+github搭建免费个人博客详细教程-好记的博客</a></p></li><li><p>Another Chinese version tutorial: <a href="https://zhuanlan.zhihu.com/p/114195340">https://zhuanlan.zhihu.com/p/114195340</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first_blog</title>
    <link href="/2023/12/09/first-blog/"/>
    <url>/2023/12/09/first-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/09/hello-world/"/>
    <url>/2023/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
